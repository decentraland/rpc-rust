// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Book {
    // message fields
    pub isbn: i64,
    pub title: ::std::string::String,
    pub author: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Book {
    fn default() -> &'a Book {
        <Book as ::protobuf::Message>::default_instance()
    }
}

impl Book {
    pub fn new() -> Book {
        ::std::default::Default::default()
    }

    // int64 isbn = 1;


    pub fn get_isbn(&self) -> i64 {
        self.isbn
    }
    pub fn clear_isbn(&mut self) {
        self.isbn = 0;
    }

    // Param is passed by value, moved
    pub fn set_isbn(&mut self, v: i64) {
        self.isbn = v;
    }

    // string title = 2;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string author = 3;


    pub fn get_author(&self) -> &str {
        &self.author
    }
    pub fn clear_author(&mut self) {
        self.author.clear();
    }

    // Param is passed by value, moved
    pub fn set_author(&mut self, v: ::std::string::String) {
        self.author = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author(&mut self) -> &mut ::std::string::String {
        &mut self.author
    }

    // Take field
    pub fn take_author(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.author, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Book {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.isbn = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.author)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isbn != 0 {
            my_size += ::protobuf::rt::value_size(1, self.isbn, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.author.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.author);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isbn != 0 {
            os.write_int64(1, self.isbn)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.author.is_empty() {
            os.write_string(3, &self.author)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Book {
        Book::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "isbn",
                |m: &Book| { &m.isbn },
                |m: &mut Book| { &mut m.isbn },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "title",
                |m: &Book| { &m.title },
                |m: &mut Book| { &mut m.title },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "author",
                |m: &Book| { &m.author },
                |m: &mut Book| { &mut m.author },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Book>(
                "Book",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Book {
        static instance: ::protobuf::rt::LazyV2<Book> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Book::new)
    }
}

impl ::protobuf::Clear for Book {
    fn clear(&mut self) {
        self.isbn = 0;
        self.title.clear();
        self.author.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Book {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Book {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetBookRequest {
    // message fields
    pub isbn: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetBookRequest {
    fn default() -> &'a GetBookRequest {
        <GetBookRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetBookRequest {
    pub fn new() -> GetBookRequest {
        ::std::default::Default::default()
    }

    // int64 isbn = 1;


    pub fn get_isbn(&self) -> i64 {
        self.isbn
    }
    pub fn clear_isbn(&mut self) {
        self.isbn = 0;
    }

    // Param is passed by value, moved
    pub fn set_isbn(&mut self, v: i64) {
        self.isbn = v;
    }
}

impl ::protobuf::Message for GetBookRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.isbn = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isbn != 0 {
            my_size += ::protobuf::rt::value_size(1, self.isbn, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isbn != 0 {
            os.write_int64(1, self.isbn)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetBookRequest {
        GetBookRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "isbn",
                |m: &GetBookRequest| { &m.isbn },
                |m: &mut GetBookRequest| { &mut m.isbn },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetBookRequest>(
                "GetBookRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetBookRequest {
        static instance: ::protobuf::rt::LazyV2<GetBookRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetBookRequest::new)
    }
}

impl ::protobuf::Clear for GetBookRequest {
    fn clear(&mut self) {
        self.isbn = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetBookRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBookRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryBooksRequest {
    // message fields
    pub author_prefix: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryBooksRequest {
    fn default() -> &'a QueryBooksRequest {
        <QueryBooksRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryBooksRequest {
    pub fn new() -> QueryBooksRequest {
        ::std::default::Default::default()
    }

    // string author_prefix = 1;


    pub fn get_author_prefix(&self) -> &str {
        &self.author_prefix
    }
    pub fn clear_author_prefix(&mut self) {
        self.author_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_author_prefix(&mut self, v: ::std::string::String) {
        self.author_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_author_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.author_prefix
    }

    // Take field
    pub fn take_author_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.author_prefix, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryBooksRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.author_prefix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.author_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.author_prefix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.author_prefix.is_empty() {
            os.write_string(1, &self.author_prefix)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryBooksRequest {
        QueryBooksRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "author_prefix",
                |m: &QueryBooksRequest| { &m.author_prefix },
                |m: &mut QueryBooksRequest| { &mut m.author_prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryBooksRequest>(
                "QueryBooksRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryBooksRequest {
        static instance: ::protobuf::rt::LazyV2<QueryBooksRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryBooksRequest::new)
    }
}

impl ::protobuf::Clear for QueryBooksRequest {
    fn clear(&mut self) {
        self.author_prefix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryBooksRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBooksRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tapi.proto\"H\n\x04Book\x12\x12\n\x04isbn\x18\x01\x20\x01(\x03R\x04is\
    bn\x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\x12\x16\n\x06author\
    \x18\x03\x20\x01(\tR\x06author\"$\n\x0eGetBookRequest\x12\x12\n\x04isbn\
    \x18\x01\x20\x01(\x03R\x04isbn\"8\n\x11QueryBooksRequest\x12#\n\rauthor_\
    prefix\x18\x01\x20\x01(\tR\x0cauthorPrefix22\n\x0bBookService\x12#\n\x07\
    GetBook\x12\x0f.GetBookRequest\x1a\x05.Book\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
