// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `index.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct RpcMessageHeader {
    // message fields
    pub message_identifier: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RpcMessageHeader {
    fn default() -> &'a RpcMessageHeader {
        <RpcMessageHeader as ::protobuf::Message>::default_instance()
    }
}

impl RpcMessageHeader {
    pub fn new() -> RpcMessageHeader {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }
}

impl ::protobuf::Message for RpcMessageHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RpcMessageHeader {
        RpcMessageHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &RpcMessageHeader| { &m.message_identifier },
                |m: &mut RpcMessageHeader| { &mut m.message_identifier },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RpcMessageHeader>(
                "RpcMessageHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RpcMessageHeader {
        static instance: ::protobuf::rt::LazyV2<RpcMessageHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RpcMessageHeader::new)
    }
}

impl ::protobuf::Clear for RpcMessageHeader {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RpcMessageHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcMessageHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreatePort {
    // message fields
    pub message_identifier: u32,
    pub port_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreatePort {
    fn default() -> &'a CreatePort {
        <CreatePort as ::protobuf::Message>::default_instance()
    }
}

impl CreatePort {
    pub fn new() -> CreatePort {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // string port_name = 4;


    pub fn get_port_name(&self) -> &str {
        &self.port_name
    }
    pub fn clear_port_name(&mut self) {
        self.port_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_name(&mut self, v: ::std::string::String) {
        self.port_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_name(&mut self) -> &mut ::std::string::String {
        &mut self.port_name
    }

    // Take field
    pub fn take_port_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreatePort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if !self.port_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.port_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if !self.port_name.is_empty() {
            os.write_string(4, &self.port_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreatePort {
        CreatePort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &CreatePort| { &m.message_identifier },
                |m: &mut CreatePort| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "port_name",
                |m: &CreatePort| { &m.port_name },
                |m: &mut CreatePort| { &mut m.port_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreatePort>(
                "CreatePort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreatePort {
        static instance: ::protobuf::rt::LazyV2<CreatePort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreatePort::new)
    }
}

impl ::protobuf::Clear for CreatePort {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreatePort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreatePortResponse {
    // message fields
    pub message_identifier: u32,
    pub port_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreatePortResponse {
    fn default() -> &'a CreatePortResponse {
        <CreatePortResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreatePortResponse {
    pub fn new() -> CreatePortResponse {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 port_id = 2;


    pub fn get_port_id(&self) -> u32 {
        self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u32) {
        self.port_id = v;
    }
}

impl ::protobuf::Message for CreatePortResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.port_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.port_id != 0 {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.port_id != 0 {
            os.write_fixed32(2, self.port_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreatePortResponse {
        CreatePortResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &CreatePortResponse| { &m.message_identifier },
                |m: &mut CreatePortResponse| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "port_id",
                |m: &CreatePortResponse| { &m.port_id },
                |m: &mut CreatePortResponse| { &mut m.port_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreatePortResponse>(
                "CreatePortResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreatePortResponse {
        static instance: ::protobuf::rt::LazyV2<CreatePortResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreatePortResponse::new)
    }
}

impl ::protobuf::Clear for CreatePortResponse {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreatePortResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreatePortResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestModule {
    // message fields
    pub message_identifier: u32,
    pub port_id: u32,
    pub module_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestModule {
    fn default() -> &'a RequestModule {
        <RequestModule as ::protobuf::Message>::default_instance()
    }
}

impl RequestModule {
    pub fn new() -> RequestModule {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 port_id = 2;


    pub fn get_port_id(&self) -> u32 {
        self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u32) {
        self.port_id = v;
    }

    // string module_name = 4;


    pub fn get_module_name(&self) -> &str {
        &self.module_name
    }
    pub fn clear_module_name(&mut self) {
        self.module_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_module_name(&mut self, v: ::std::string::String) {
        self.module_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_name(&mut self) -> &mut ::std::string::String {
        &mut self.module_name
    }

    // Take field
    pub fn take_module_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.module_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RequestModule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.port_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.module_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.port_id != 0 {
            my_size += 5;
        }
        if !self.module_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.module_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.port_id != 0 {
            os.write_fixed32(2, self.port_id)?;
        }
        if !self.module_name.is_empty() {
            os.write_string(4, &self.module_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestModule {
        RequestModule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &RequestModule| { &m.message_identifier },
                |m: &mut RequestModule| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "port_id",
                |m: &RequestModule| { &m.port_id },
                |m: &mut RequestModule| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "module_name",
                |m: &RequestModule| { &m.module_name },
                |m: &mut RequestModule| { &mut m.module_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestModule>(
                "RequestModule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestModule {
        static instance: ::protobuf::rt::LazyV2<RequestModule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestModule::new)
    }
}

impl ::protobuf::Clear for RequestModule {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_id = 0;
        self.module_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestModule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestModuleResponse {
    // message fields
    pub message_identifier: u32,
    pub port_id: u32,
    pub procedures: ::protobuf::RepeatedField<ModuleProcedure>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestModuleResponse {
    fn default() -> &'a RequestModuleResponse {
        <RequestModuleResponse as ::protobuf::Message>::default_instance()
    }
}

impl RequestModuleResponse {
    pub fn new() -> RequestModuleResponse {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 port_id = 2;


    pub fn get_port_id(&self) -> u32 {
        self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u32) {
        self.port_id = v;
    }

    // repeated .ModuleProcedure procedures = 5;


    pub fn get_procedures(&self) -> &[ModuleProcedure] {
        &self.procedures
    }
    pub fn clear_procedures(&mut self) {
        self.procedures.clear();
    }

    // Param is passed by value, moved
    pub fn set_procedures(&mut self, v: ::protobuf::RepeatedField<ModuleProcedure>) {
        self.procedures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_procedures(&mut self) -> &mut ::protobuf::RepeatedField<ModuleProcedure> {
        &mut self.procedures
    }

    // Take field
    pub fn take_procedures(&mut self) -> ::protobuf::RepeatedField<ModuleProcedure> {
        ::std::mem::replace(&mut self.procedures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RequestModuleResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.procedures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.port_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.procedures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.port_id != 0 {
            my_size += 5;
        }
        for value in &self.procedures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.port_id != 0 {
            os.write_fixed32(2, self.port_id)?;
        }
        for v in &self.procedures {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestModuleResponse {
        RequestModuleResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &RequestModuleResponse| { &m.message_identifier },
                |m: &mut RequestModuleResponse| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "port_id",
                |m: &RequestModuleResponse| { &m.port_id },
                |m: &mut RequestModuleResponse| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ModuleProcedure>>(
                "procedures",
                |m: &RequestModuleResponse| { &m.procedures },
                |m: &mut RequestModuleResponse| { &mut m.procedures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestModuleResponse>(
                "RequestModuleResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestModuleResponse {
        static instance: ::protobuf::rt::LazyV2<RequestModuleResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestModuleResponse::new)
    }
}

impl ::protobuf::Clear for RequestModuleResponse {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_id = 0;
        self.procedures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestModuleResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestModuleResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DestroyPort {
    // message fields
    pub message_identifier: u32,
    pub port_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DestroyPort {
    fn default() -> &'a DestroyPort {
        <DestroyPort as ::protobuf::Message>::default_instance()
    }
}

impl DestroyPort {
    pub fn new() -> DestroyPort {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 port_id = 2;


    pub fn get_port_id(&self) -> u32 {
        self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u32) {
        self.port_id = v;
    }
}

impl ::protobuf::Message for DestroyPort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.port_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.port_id != 0 {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.port_id != 0 {
            os.write_fixed32(2, self.port_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DestroyPort {
        DestroyPort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &DestroyPort| { &m.message_identifier },
                |m: &mut DestroyPort| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "port_id",
                |m: &DestroyPort| { &m.port_id },
                |m: &mut DestroyPort| { &mut m.port_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DestroyPort>(
                "DestroyPort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DestroyPort {
        static instance: ::protobuf::rt::LazyV2<DestroyPort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DestroyPort::new)
    }
}

impl ::protobuf::Clear for DestroyPort {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DestroyPort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DestroyPort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ModuleProcedure {
    // message fields
    pub procedure_id: u32,
    pub procedure_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ModuleProcedure {
    fn default() -> &'a ModuleProcedure {
        <ModuleProcedure as ::protobuf::Message>::default_instance()
    }
}

impl ModuleProcedure {
    pub fn new() -> ModuleProcedure {
        ::std::default::Default::default()
    }

    // fixed32 procedure_id = 1;


    pub fn get_procedure_id(&self) -> u32 {
        self.procedure_id
    }
    pub fn clear_procedure_id(&mut self) {
        self.procedure_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_procedure_id(&mut self, v: u32) {
        self.procedure_id = v;
    }

    // string procedure_name = 2;


    pub fn get_procedure_name(&self) -> &str {
        &self.procedure_name
    }
    pub fn clear_procedure_name(&mut self) {
        self.procedure_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_procedure_name(&mut self, v: ::std::string::String) {
        self.procedure_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_procedure_name(&mut self) -> &mut ::std::string::String {
        &mut self.procedure_name
    }

    // Take field
    pub fn take_procedure_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.procedure_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ModuleProcedure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.procedure_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.procedure_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.procedure_id != 0 {
            my_size += 5;
        }
        if !self.procedure_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.procedure_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.procedure_id != 0 {
            os.write_fixed32(1, self.procedure_id)?;
        }
        if !self.procedure_name.is_empty() {
            os.write_string(2, &self.procedure_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ModuleProcedure {
        ModuleProcedure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "procedure_id",
                |m: &ModuleProcedure| { &m.procedure_id },
                |m: &mut ModuleProcedure| { &mut m.procedure_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "procedure_name",
                |m: &ModuleProcedure| { &m.procedure_name },
                |m: &mut ModuleProcedure| { &mut m.procedure_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ModuleProcedure>(
                "ModuleProcedure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ModuleProcedure {
        static instance: ::protobuf::rt::LazyV2<ModuleProcedure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ModuleProcedure::new)
    }
}

impl ::protobuf::Clear for ModuleProcedure {
    fn clear(&mut self) {
        self.procedure_id = 0;
        self.procedure_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ModuleProcedure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ModuleProcedure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub message_identifier: u32,
    pub port_id: u32,
    pub procedure_id: u32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 port_id = 2;


    pub fn get_port_id(&self) -> u32 {
        self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u32) {
        self.port_id = v;
    }

    // fixed32 procedure_id = 4;


    pub fn get_procedure_id(&self) -> u32 {
        self.procedure_id
    }
    pub fn clear_procedure_id(&mut self) {
        self.procedure_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_procedure_id(&mut self, v: u32) {
        self.procedure_id = v;
    }

    // bytes payload = 6;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.port_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.procedure_id = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.port_id != 0 {
            my_size += 5;
        }
        if self.procedure_id != 0 {
            my_size += 5;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.port_id != 0 {
            os.write_fixed32(2, self.port_id)?;
        }
        if self.procedure_id != 0 {
            os.write_fixed32(4, self.procedure_id)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(6, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &Request| { &m.message_identifier },
                |m: &mut Request| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "port_id",
                |m: &Request| { &m.port_id },
                |m: &mut Request| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "procedure_id",
                |m: &Request| { &m.procedure_id },
                |m: &mut Request| { &mut m.procedure_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Request| { &m.payload },
                |m: &mut Request| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_id = 0;
        self.procedure_id = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteError {
    // message fields
    pub message_identifier: u32,
    pub error_code: u32,
    pub error_message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteError {
    fn default() -> &'a RemoteError {
        <RemoteError as ::protobuf::Message>::default_instance()
    }
}

impl RemoteError {
    pub fn new() -> RemoteError {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 error_code = 2;


    pub fn get_error_code(&self) -> u32 {
        self.error_code
    }
    pub fn clear_error_code(&mut self) {
        self.error_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_error_code(&mut self, v: u32) {
        self.error_code = v;
    }

    // string error_message = 3;


    pub fn get_error_message(&self) -> &str {
        &self.error_message
    }
    pub fn clear_error_message(&mut self) {
        self.error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_message(&mut self, v: ::std::string::String) {
        self.error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.error_message
    }

    // Take field
    pub fn take_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RemoteError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.error_code = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.error_code != 0 {
            my_size += 5;
        }
        if !self.error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.error_code != 0 {
            os.write_fixed32(2, self.error_code)?;
        }
        if !self.error_message.is_empty() {
            os.write_string(3, &self.error_message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteError {
        RemoteError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &RemoteError| { &m.message_identifier },
                |m: &mut RemoteError| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "error_code",
                |m: &RemoteError| { &m.error_code },
                |m: &mut RemoteError| { &mut m.error_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error_message",
                |m: &RemoteError| { &m.error_message },
                |m: &mut RemoteError| { &mut m.error_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RemoteError>(
                "RemoteError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RemoteError {
        static instance: ::protobuf::rt::LazyV2<RemoteError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RemoteError::new)
    }
}

impl ::protobuf::Clear for RemoteError {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.error_code = 0;
        self.error_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub message_identifier: u32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // bytes payload = 6;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(6, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &Response| { &m.message_identifier },
                |m: &mut Response| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Response| { &m.payload },
                |m: &mut Response| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamMessage {
    // message fields
    pub message_identifier: u32,
    pub port_id: u32,
    pub sequence_id: u32,
    pub payload: ::std::vec::Vec<u8>,
    pub closed: bool,
    pub ack: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamMessage {
    fn default() -> &'a StreamMessage {
        <StreamMessage as ::protobuf::Message>::default_instance()
    }
}

impl StreamMessage {
    pub fn new() -> StreamMessage {
        ::std::default::Default::default()
    }

    // fixed32 message_identifier = 1;


    pub fn get_message_identifier(&self) -> u32 {
        self.message_identifier
    }
    pub fn clear_message_identifier(&mut self) {
        self.message_identifier = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_identifier(&mut self, v: u32) {
        self.message_identifier = v;
    }

    // fixed32 port_id = 2;


    pub fn get_port_id(&self) -> u32 {
        self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: u32) {
        self.port_id = v;
    }

    // fixed32 sequence_id = 4;


    pub fn get_sequence_id(&self) -> u32 {
        self.sequence_id
    }
    pub fn clear_sequence_id(&mut self) {
        self.sequence_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence_id(&mut self, v: u32) {
        self.sequence_id = v;
    }

    // bytes payload = 6;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // bool closed = 7;


    pub fn get_closed(&self) -> bool {
        self.closed
    }
    pub fn clear_closed(&mut self) {
        self.closed = false;
    }

    // Param is passed by value, moved
    pub fn set_closed(&mut self, v: bool) {
        self.closed = v;
    }

    // bool ack = 8;


    pub fn get_ack(&self) -> bool {
        self.ack
    }
    pub fn clear_ack(&mut self) {
        self.ack = false;
    }

    // Param is passed by value, moved
    pub fn set_ack(&mut self, v: bool) {
        self.ack = v;
    }
}

impl ::protobuf::Message for StreamMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.message_identifier = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.port_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.sequence_id = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.closed = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ack = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.message_identifier != 0 {
            my_size += 5;
        }
        if self.port_id != 0 {
            my_size += 5;
        }
        if self.sequence_id != 0 {
            my_size += 5;
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.payload);
        }
        if self.closed != false {
            my_size += 2;
        }
        if self.ack != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.message_identifier != 0 {
            os.write_fixed32(1, self.message_identifier)?;
        }
        if self.port_id != 0 {
            os.write_fixed32(2, self.port_id)?;
        }
        if self.sequence_id != 0 {
            os.write_fixed32(4, self.sequence_id)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(6, &self.payload)?;
        }
        if self.closed != false {
            os.write_bool(7, self.closed)?;
        }
        if self.ack != false {
            os.write_bool(8, self.ack)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamMessage {
        StreamMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "message_identifier",
                |m: &StreamMessage| { &m.message_identifier },
                |m: &mut StreamMessage| { &mut m.message_identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "port_id",
                |m: &StreamMessage| { &m.port_id },
                |m: &mut StreamMessage| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "sequence_id",
                |m: &StreamMessage| { &m.sequence_id },
                |m: &mut StreamMessage| { &mut m.sequence_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &StreamMessage| { &m.payload },
                |m: &mut StreamMessage| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "closed",
                |m: &StreamMessage| { &m.closed },
                |m: &mut StreamMessage| { &mut m.closed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ack",
                |m: &StreamMessage| { &m.ack },
                |m: &mut StreamMessage| { &mut m.ack },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamMessage>(
                "StreamMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamMessage {
        static instance: ::protobuf::rt::LazyV2<StreamMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamMessage::new)
    }
}

impl ::protobuf::Clear for StreamMessage {
    fn clear(&mut self) {
        self.message_identifier = 0;
        self.port_id = 0;
        self.sequence_id = 0;
        self.payload.clear();
        self.closed = false;
        self.ack = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcMessageTypes {
    RpcMessageTypes_EMPTY = 0,
    RpcMessageTypes_REQUEST = 1,
    RpcMessageTypes_RESPONSE = 2,
    RpcMessageTypes_STREAM_MESSAGE = 3,
    RpcMessageTypes_STREAM_ACK = 4,
    RpcMessageTypes_CREATE_PORT = 5,
    RpcMessageTypes_CREATE_PORT_RESPONSE = 6,
    RpcMessageTypes_REQUEST_MODULE = 7,
    RpcMessageTypes_REQUEST_MODULE_RESPONSE = 8,
    RpcMessageTypes_REMOTE_ERROR_RESPONSE = 9,
    RpcMessageTypes_DESTROY_PORT = 10,
    RpcMessageTypes_SERVER_READY = 11,
}

impl ::protobuf::ProtobufEnum for RpcMessageTypes {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcMessageTypes> {
        match value {
            0 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_EMPTY),
            1 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_REQUEST),
            2 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_RESPONSE),
            3 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_STREAM_MESSAGE),
            4 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_STREAM_ACK),
            5 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_CREATE_PORT),
            6 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_CREATE_PORT_RESPONSE),
            7 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_REQUEST_MODULE),
            8 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_REQUEST_MODULE_RESPONSE),
            9 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_REMOTE_ERROR_RESPONSE),
            10 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_DESTROY_PORT),
            11 => ::std::option::Option::Some(RpcMessageTypes::RpcMessageTypes_SERVER_READY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcMessageTypes] = &[
            RpcMessageTypes::RpcMessageTypes_EMPTY,
            RpcMessageTypes::RpcMessageTypes_REQUEST,
            RpcMessageTypes::RpcMessageTypes_RESPONSE,
            RpcMessageTypes::RpcMessageTypes_STREAM_MESSAGE,
            RpcMessageTypes::RpcMessageTypes_STREAM_ACK,
            RpcMessageTypes::RpcMessageTypes_CREATE_PORT,
            RpcMessageTypes::RpcMessageTypes_CREATE_PORT_RESPONSE,
            RpcMessageTypes::RpcMessageTypes_REQUEST_MODULE,
            RpcMessageTypes::RpcMessageTypes_REQUEST_MODULE_RESPONSE,
            RpcMessageTypes::RpcMessageTypes_REMOTE_ERROR_RESPONSE,
            RpcMessageTypes::RpcMessageTypes_DESTROY_PORT,
            RpcMessageTypes::RpcMessageTypes_SERVER_READY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RpcMessageTypes>("RpcMessageTypes", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RpcMessageTypes {
}

impl ::std::default::Default for RpcMessageTypes {
    fn default() -> Self {
        RpcMessageTypes::RpcMessageTypes_EMPTY
    }
}

impl ::protobuf::reflect::ProtobufValue for RpcMessageTypes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bindex.proto\"A\n\x10RpcMessageHeader\x12-\n\x12message_identifier\
    \x18\x01\x20\x01(\x07R\x11messageIdentifier\"X\n\nCreatePort\x12-\n\x12m\
    essage_identifier\x18\x01\x20\x01(\x07R\x11messageIdentifier\x12\x1b\n\t\
    port_name\x18\x04\x20\x01(\tR\x08portName\"\\\n\x12CreatePortResponse\
    \x12-\n\x12message_identifier\x18\x01\x20\x01(\x07R\x11messageIdentifier\
    \x12\x17\n\x07port_id\x18\x02\x20\x01(\x07R\x06portId\"x\n\rRequestModul\
    e\x12-\n\x12message_identifier\x18\x01\x20\x01(\x07R\x11messageIdentifie\
    r\x12\x17\n\x07port_id\x18\x02\x20\x01(\x07R\x06portId\x12\x1f\n\x0bmodu\
    le_name\x18\x04\x20\x01(\tR\nmoduleName\"\x91\x01\n\x15RequestModuleResp\
    onse\x12-\n\x12message_identifier\x18\x01\x20\x01(\x07R\x11messageIdenti\
    fier\x12\x17\n\x07port_id\x18\x02\x20\x01(\x07R\x06portId\x120\n\nproced\
    ures\x18\x05\x20\x03(\x0b2\x10.ModuleProcedureR\nprocedures\"U\n\x0bDest\
    royPort\x12-\n\x12message_identifier\x18\x01\x20\x01(\x07R\x11messageIde\
    ntifier\x12\x17\n\x07port_id\x18\x02\x20\x01(\x07R\x06portId\"[\n\x0fMod\
    uleProcedure\x12!\n\x0cprocedure_id\x18\x01\x20\x01(\x07R\x0bprocedureId\
    \x12%\n\x0eprocedure_name\x18\x02\x20\x01(\tR\rprocedureName\"\x8e\x01\n\
    \x07Request\x12-\n\x12message_identifier\x18\x01\x20\x01(\x07R\x11messag\
    eIdentifier\x12\x17\n\x07port_id\x18\x02\x20\x01(\x07R\x06portId\x12!\n\
    \x0cprocedure_id\x18\x04\x20\x01(\x07R\x0bprocedureId\x12\x18\n\x07paylo\
    ad\x18\x06\x20\x01(\x0cR\x07payload\"\x80\x01\n\x0bRemoteError\x12-\n\
    \x12message_identifier\x18\x01\x20\x01(\x07R\x11messageIdentifier\x12\
    \x1d\n\nerror_code\x18\x02\x20\x01(\x07R\terrorCode\x12#\n\rerror_messag\
    e\x18\x03\x20\x01(\tR\x0cerrorMessage\"S\n\x08Response\x12-\n\x12message\
    _identifier\x18\x01\x20\x01(\x07R\x11messageIdentifier\x12\x18\n\x07payl\
    oad\x18\x06\x20\x01(\x0cR\x07payload\"\xbc\x01\n\rStreamMessage\x12-\n\
    \x12message_identifier\x18\x01\x20\x01(\x07R\x11messageIdentifier\x12\
    \x17\n\x07port_id\x18\x02\x20\x01(\x07R\x06portId\x12\x1f\n\x0bsequence_\
    id\x18\x04\x20\x01(\x07R\nsequenceId\x12\x18\n\x07payload\x18\x06\x20\
    \x01(\x0cR\x07payload\x12\x16\n\x06closed\x18\x07\x20\x01(\x08R\x06close\
    d\x12\x10\n\x03ack\x18\x08\x20\x01(\x08R\x03ack*\xb6\x03\n\x0fRpcMessage\
    Types\x12\x19\n\x15RpcMessageTypes_EMPTY\x10\0\x12\x1b\n\x17RpcMessageTy\
    pes_REQUEST\x10\x01\x12\x1c\n\x18RpcMessageTypes_RESPONSE\x10\x02\x12\"\
    \n\x1eRpcMessageTypes_STREAM_MESSAGE\x10\x03\x12\x1e\n\x1aRpcMessageType\
    s_STREAM_ACK\x10\x04\x12\x1f\n\x1bRpcMessageTypes_CREATE_PORT\x10\x05\
    \x12(\n$RpcMessageTypes_CREATE_PORT_RESPONSE\x10\x06\x12\"\n\x1eRpcMessa\
    geTypes_REQUEST_MODULE\x10\x07\x12+\n'RpcMessageTypes_REQUEST_MODULE_RES\
    PONSE\x10\x08\x12)\n%RpcMessageTypes_REMOTE_ERROR_RESPONSE\x10\t\x12\x20\
    \n\x1cRpcMessageTypes_DESTROY_PORT\x10\n\x12\x20\n\x1cRpcMessageTypes_SE\
    RVER_READY\x10\x0bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
